#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable




struct myVert
{
    vec4 a;
    vec4 b;
};


layout(std140, binding=0) buffer dataFromTo
{
    myVert vertsFromTo[];
};


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;


vec3 calNormal(vec3 a, vec3 b, vec3 c)
{
    vec3 vab=b-a;
    vec3 vac=c-a;
    return normalize(cross(vab, vac));
}


vec3 getSpecPosition(uint indexIn)
{
    return vertsFromTo[indexIn].a.xyz;
}


void addSpecNormal(vec3 normalIn, uint indexIn)
{
    vertsFromTo[indexIn].b.yzw+=normalIn;
}

void main()
{

    uint indexTemp=gl_NumWorkGroups.x*gl_WorkGroupID.y+gl_WorkGroupID.x;







    if (gl_WorkGroupID.x<(gl_NumWorkGroups.x-uint(1))&&gl_WorkGroupID.y<(gl_NumWorkGroups.y-uint(1)))
    {


        vec3 a=getSpecPosition(indexTemp);

        vec3 b=getSpecPosition(indexTemp+gl_NumWorkGroups.x);

        vec3 c=getSpecPosition(indexTemp+uint(1));

        vec3 normal=calNormal(a, b, c);

        addSpecNormal(normal, indexTemp);
        addSpecNormal(normal, indexTemp+gl_NumWorkGroups.x);
        addSpecNormal(normal, indexTemp+uint(1));



        a=getSpecPosition(indexTemp+uint(1));

        b=getSpecPosition(indexTemp+gl_NumWorkGroups.x);

        c=getSpecPosition(indexTemp+uint(1)+gl_NumWorkGroups.x);

        normal=calNormal(a, b, c);

        addSpecNormal(normal, indexTemp+uint(1));
        addSpecNormal(normal, indexTemp+gl_NumWorkGroups.x);
        addSpecNormal(normal, indexTemp+uint(1)+gl_NumWorkGroups.x);
    }
}
